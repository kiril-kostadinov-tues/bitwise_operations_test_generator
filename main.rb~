require "nokogiri"

class Task
	attr_accessor :x
	attr_accessor :body

	def initialize(x, body)
		@x = x
		@body = body
	end
end

class HtmlGenerator
	def generate_html(s)
		builder = Nokogiri::HTML::Builder.new do |doc|
		doc.html {
			doc.body {
				doc.table(border: 1) {
					doc.tr {
						doc.td {
							doc.text "#{s.x} = ?"
							doc.br
							s.body.each_char do |i|
									doc.text i
									if i == ';'
										doc.br
									end		
							end
						}
					}
				}
			}
		}
		end
		puts builder.to_html
	end
end

def hex_length(l)
	num = "0x#{rand(1..((16**l) - 1)).to_s(16)}"
end

def hex_range(range)
	num = "0x#{rand(range).to_s(16)}"
end

def dec_length(l)
	num = rand(1..((10**l) - 1)).to_s
end

def dec_range(range)
	num = rand(range).to_s
end

class EasyTaskGenerator
	def generate_task(number)
		x = []
		body = ""
		File.open("easyTask#{number}.txt").each_with_index do |line, index|
			if index == 0
				x = line.gsub("\n", "").split(',')
				next
			end
			body += line
		end
		num = rand(15)
		body = eval('"' + body + '"')
		Task.new(x, body)
	end
end

class HardTaskGenerator
	def generate_task(number)
		x = []
		body = ""
		File.open("hardTask#{number}.txt").each_with_index do |line, index|
			if index == 0
				x = line.gsub("\n", "").split(',')
				next
			end
			body += line
		end
		body = eval('"' + body + '"')
		Task.new(x, body)
	end
end

generator = EasyTaskGenerator.new
p generator.generate_task(1)
html_generator = HtmlGenerator.new

